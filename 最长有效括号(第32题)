// 给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。

class Solution {
public:
    int longestValidParentheses(string s) {
        int m = s.size(), res = 0;
        // 暴力解法(超时)
        // 时间复杂度O(N^3),空间复杂度O(N)
        // int count = m / 2;
        // for (int i = 2*count; i >= 2; i -= 2) {
        //     for (int j = 0; j <= m-i; ++j) {
        //         if (isValid(s, j, j + i - 1)) {
        //             res = max(res, i);
        //         }
        //     }
        // }
        
        // 动态规划
        // 时间复杂度O(N),空间复杂度O(N)
        // vector<int> dp(m, 0);
        // for (int i = 1; i < m; i++) {
        //     if (s[i] == ')') {
        //         if (s[i - 1] == '(') {
        //             if (i >= 2) dp[i] = dp[i - 2] + 2;
        //             else dp[i] = 2;
        //         } 
        //         else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(') {
        //             if (i - dp[i - 1] >= 2) dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2;
        //             else dp[i] = dp[i - 1] + 2;
        //         }
        //         res = max(res, dp[i]);
        //     }
        // }

        // 正序逆序
        // 时间复杂度O(N),空间复杂度O(1)
        int left = 0, right = 0;
        for (int i = 0; i < m; i++) {
            if (s[i] == '(') left++;
            else right++;
            if (right == left) res = max(res, 2*right);
            else if (right > left)  {
                right = 0;
                left = 0;
            }
        }
        left = 0; right = 0;
        for (int i = m-1; i >= 0; i--) {
            if (s[i] == '(') left++;
            else right++;
            if (right == left) res = max(res, 2*right);
            else if (left > right)  {
                right = 0;
                left = 0;
            }
        }
        return res;
    }
    bool isValid(string s, int l, int r) {
        stack<char> stk;
        for (int i = l; i <= r; ++i) {
            if (s[i] == '(') stk.push(s[i]);
            else if (!stk.empty() && stk.top() == '(') stk.pop();
            else return false;
        }

        return stk.empty();
    }
};
