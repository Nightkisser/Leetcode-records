/*
实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。
不得使用库函数，同时不需要考虑大数问题。
*/
class Solution {
public:
    double myPow(double x, int n) {
        // 位计算思想
        // n&1判断是否为奇数,n>>1二进制数向右移动一位
        // n = a1*1 + a2*2 + a3*4 + a4*8 + ...
        // 如1001 = 1*2**0 + 1*2**3
        // 判断n&1的值，求得an的系数
        // 每个循环更新x的值，x,x**2,x**4,x**8...
        
        //时间复杂度O(log2n),由于是位运算。空间复杂度O(1)
        if (x == 0) return 0;
        
        // 防止负数范围的溢出
        long long m = n;
        double res = 1;
        
        //n为负数时
        if (m < 0) {
            x = 1/x;
            m = -m ;
        }
        while (m) {
            // 判断二进制位的值是否为1
            if (m & 1) res *= x;
            // 二进制每一位之间相差2倍x**2 * x**2 = (x**(1+1))**2
            x *= x;
            // 按位向右移动一位
            m >>= 1;
        }
        return res;
    }
};
