/*
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。
例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。
*/
class Solution {
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        // 时间复杂度O(n),每个元素最多入栈与出栈一次，即最多共2N次，空间复杂度O(n)
        // 判断压入值序列和弹出序列是否都为空，若为空则返回true
        if (pushed.size()==0 && popped.size()==0) return true;
        int m= pushed.size(), n= popped.size();
        // 若两序列的长度不一致，则返回false
        if (m!=n) return false;
        // 定义模拟栈
        stack<int> stk;
        // 定义弹出数的索引
        int index=0;
        for (int i= 0; i< m; ++i) {
            // 按照压入序列顺序，往栈中压入数
            stk.push(pushed[i]);
            // 根据弹出序列循环判断是否弹出栈顶数，循环条件为栈不为空并且栈顶数等于索引指向数
            while (!stk.empty() && stk.top()==popped[index]) {
                stk.pop();
                // 若弹出数则将索引后移一位
                index++;
            }
        }
        // 跳出循环后，若栈为空，则表明弹出序列是出栈的序列，返回true，否则返回false
        return stk.empty();
    }
};
