/*
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。
例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。
*/
class Solution {
public:
    // 区间左端点为比较对象
    // 时间复杂度O(logn)，空间复杂度O(1)
    int minArray(vector<int>& numbers) {
        int left=0,right=numbers.size()-1;
        // 判断数组是否递增
        int value = numbers[0];
        if (right==0) return value;
        while (left<right){
            int pivot = left + (right-left)/2;
            if(numbers[pivot]>numbers[left]){
            // int取截断值，left = pivot+1，使得区间为1的时候，左端点能够取到右端点的值。
                left = pivot+1;
            }
            else if(numbers[pivot]<numbers[left]){
                right = pivot;
            }
            else{
            // 如果两端点值相等，但是区间长度大于1，进行如下处理
                left+=1;
            }
            // 保留最小左端点值
            if (value > numbers[left]){
                value = numbers[left];
            }
        }
        // 与最小左端点进行比较
        return min(numbers[right],value);
        
        // 区间右端点为比较对象
        // 时间复杂度O(logn)，空间复杂度O(1)
        // while (left<right){
        //     int pivot = left + (right-left)/2;
        //     if(numbers[pivot]>numbers[right]){
        //         left = pivot+1;
        //     }
        //     else if(numbers[pivot]<numbers[right]){
        //         right = pivot;
        //     }
        //     else{
        //         right-=1;
        //     }
        // }
        // return numbers[left];
        
    }
};
