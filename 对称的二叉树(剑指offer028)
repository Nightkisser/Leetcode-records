//请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。


class Solution {
public:
    // 递归
    // 时间复杂度O(n)，空间复杂度O(n)
    bool isSymmetric(TreeNode* root) {
        // 空树,则返回true
        if (!root) return true;
        // 返回逐层递归后的值
        return recur(root->left,root->right);
    }
    // 判断二叉树位置对称的两个节点的值是否相等
    bool recur(TreeNode* l, TreeNode* r){
        // 如果左右节点都为空，则返回true
        if (!l && !r) return true;
        // 如果单独一个节点为空，另一个节点不为空，或者对称节点间的val值不等，则返回false
        if (!l || !r || l->val != r->val) return false;
        // 继续递归，比较下一层
        return recur(l->left,r->right) && recur(l->right,r->left);
    }
};
