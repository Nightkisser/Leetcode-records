// 给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。
/* 示例：
输入："Let's take LeetCode contest"
输出："s'teL ekat edoCteeL tsetnoc"
*/

class Solution {
public:
    string reverseWords(string s) {
        int m = s.size();
        if (m == 0) return "";
        string res;
        int bg = 0, ed = 0, next;
        // 双指针
        for (int i = 0; i < m; ++i) {
            // 使用额外空间
            // 时间复杂度O(N),空间复杂度O(N)
            // if (s[i] == ' ' || i == m-1) {
            //     next = i+1;
            //     if (i == m-1) ed = i;
            //     else ed = i-1;
            //     while (ed >= bg) {
            //         res += s[ed];
            //         ed--;
            //     }
            //     bg = next;
            //     if (next < m) res += ' ';
            // }

            // 原地解法(不使用额外空间)
            // 时间复杂度O(N),空间复杂度O(1)
            if (s[i] == ' ' || i == m-1) {
                next = i+1;
                if (i == m-1) ed = i;
                else ed = i-1;
                while (ed > bg) {
                    swap(s[bg],s[ed]);
                    bg++;
                    ed--;
                }
                bg = next;
            }
        }
        return s;
    }
};
