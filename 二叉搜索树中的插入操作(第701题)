// 给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 
// 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        // 递归
        // 时间复杂度O(N),空间复杂度O(1)
        // if (!root) return new TreeNode(val);
        // if (root->val > val) root->left = insertIntoBST(root->left,val);
        // if (root->val < val) root->right = insertIntoBST(root->right,val);
        // return root;

        // 迭代
        // 时间复杂度O(N),空间复杂度O(1)
        // 空节点，构造节点
        if (!root) return new TreeNode(val);
        TreeNode* node = root;
        while(node) {
            // 向左搜索插入位置
            if (node->val > val) {
                // 当左节点不存在时,插入指定节点
                if (!node->left) {
                    node->left = new TreeNode(val);
                    break;
                }
                node = node->left;
            }
            // 向右搜索插入位置
            else if (node->val < val) {
                // 当右节点不存在时,插入指定节点
                if (!node->right) {
                    node->right = new TreeNode(val);
                    break;
                }
                node = node->right;
            }
        }
        return root;
    }
};
