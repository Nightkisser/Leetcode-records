// 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。
// 一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

class Solution {
public:
    // 动态规划
    // 时间复杂度O(n),空间复杂度O(1)
    // 转移方程：若xi和x{i-1}组成的两位数字可以被翻译，则dp[i]=dp[i−1]+dp[i−2]；否则 dp[i] = dp[i - 1]dp[i]=dp[i−1]。
    int translateNum(int num) {
        // x为数字的末位，y为倒数第二位
        // ffront为最后两位数字可以翻译为字符的方式，front为最后一位数字翻译为字符的方式
        int ffront=1,front=1,x=num%10,y;
        while(num) {
            // 每一步往前一位取数
            num = num/10;
            y = num%10;
            // 如果最后两位数在10~25之间则方式总数为ffront+front.否则为front
            int c = (10*y+x>=10 && 10*y+x<=25) ? ffront+front : front;
            // 因为动态规划的对称性，从后往前计算表示总数
            // 更新dp[i-1]和dp[i-2]的值
            ffront = front;
            front = c;
            x = y;
        }
        return front;
    }
};
