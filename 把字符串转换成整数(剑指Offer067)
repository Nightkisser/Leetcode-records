/* 写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。

  首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

  当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

  该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

  注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

  在任何情况下，若函数不能进行有效的转换时，请返回 0。

  说明：

  假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
*/

class Solution {
public:
    int strToInt(string str) {
        int m = str.size();
        // 判断是非为空字符串
        if (m == 0) return 0;
        // 定义判断数字是否越界的临界值
        int bndry = INT_MAX / 10;
        // 删除字符串头部的空格
        while (str.front()== ' ') {
            if (str.front()== ' ') str.erase(str.begin());
        }
        // 定义结果变量res
        int res=0,len = str.size();
        // 定义记录正负号的的变量sign，记录遍历起点的索引变量begin
        int sign=1,begin=1;
        // 判断是否为空字符串
        if (len == 0) return 0;
        // 如果字符串首位为'-'，则sign=-1，结果即为负数
        if (str[0] == '-' ) sign = -1;
        // 如果字符串首位为'+'，则从索引1开始遍历，否则从索引0开始遍历
        else if (str[0] != '+') begin = 0;
        for (int i= begin; i< len; ++i) {
            // 如果字符值小于'0'或者大于'9'终止循环
            if (str[i] < '0' || str[i] > '9') break;
            // 如果res值 > 临界值，则本次循环后res*10>INT_MAX
            // 如果res值 = 临界值并且本次循环的单个字符大于7，则本次循环后res*10 + str[i] - '0'>INT_MAX
            if (res > bndry || res == bndry && str[i] > '7') {
                // 判定为数字越界，若sign为正，返回INT_MAX,若sign为负，返回INT_MIN
                return sign == 1 ? INT_MAX : INT_MIN;
            }
            // 每次循环计算res的值，当前res*10 + 当前循环内字符str[i]-'0'
            res = res * 10 + (str[i] - '0');
        }
        // 根据正负号返回结果
        return sign*res;
    }
};
