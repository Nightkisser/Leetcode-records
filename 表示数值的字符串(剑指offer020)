/*
请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。

数值（按顺序）可以分成以下几个部分：
若干空格
一个小数或者整数
（可选）一个'e'或'E'，后面跟着一个整数
若干空格

小数（按顺序）可以分成以下几个部分：
（可选）一个符号字符（'+' 或 '-'）
下述格式之一：
至少一位数字，后面跟着一个点 '.'
至少一位数字，后面跟着一个点 '.' ，后面再跟着至少一位数字
一个点 '.' ，后面跟着至少一位数字

整数（按顺序）可以分成以下几个部分：
（可选）一个符号字符（'+' 或 '-'）
至少一位数字
*/

class Solution {
public:
    bool isNumber(string s) {
        // 常规思路，按顺序判别，判别的条件为非数值
        // 时间复杂度O(N),空间复杂度O(1)
        
        int m = s.size();
        // s长度为0(即空字符串)
        if(m == 0) return false; 
        // 标记是否遇到数位、小数点、‘e’或'E'
        bool isNum = false, isDot = false, ise_or_E = false; 
        // 删除字符串头尾的空格，转为字符数组，方便遍历判断每个字符
        s.erase(0,s.find_first_not_of(" "));  // 删除字符串头部空格
        s.erase(s.find_last_not_of(" ") + 1);  // // 删除字符串尾部的空格
        // 循环访问每个字符
        for(int i=0; i<s.size(); i++) {
            // 判断当前字符是否为 0~9 的数位，并做标记
            if(s[i] >= '0' && s[i] <= '9') isNum = true; 
            // 判断当前字符是否为小数点，并做标记
            else if(s[i] == '.') { 
            // 如果小数点之前可以没有整数，则只判定有没有出现过小数点或e\E
            // 如果已经出现了小数点，再出现出现小数点、或‘e’、'E'，判定非数值
                if(isDot || ise_or_E) return false; 
                isDot = true;
            }
            // 判断当前字符是否为e\E，并做标记
            else if(s[i] == 'e' || s[i] == 'E') {
            // e\E之前必须有整数，则只判定前面是否是整数或出现过e\E
            // 如果没有出现过整数，或者已经出现了e\E，判定非数值
                if(isNum==false || ise_or_E) return false;
                ise_or_E = true; // 标记已经遇到‘e’或'E'
            // 因为‘e’或'E'之后也必须接上整数，重置isNum，防止出现123e或者123e+的非法情况
                isNum = false; 
            }
            // 判断当前字符是否为正负号
            // 正负号只可能出现在第一个位置，或者出现在‘e’或'E'的后面一个位置
            else if(s[i] == '-' ||s[i] == '+') { 
                if(i!=0 && s[i-1] != 'e' && s[i-1] != 'E') return false;
            }
            // 其它情况均为不合法字符
            else return false; 
        }
        return isNum;
    }
};
