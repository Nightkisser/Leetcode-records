// 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。
// 进阶：你能尝试使用一趟扫描实现吗？

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (!head->next) return nullptr;
        ListNode *slow = head, *fast = head, *pre = new ListNode();
        // 设置哨兵节点，下一个节点指向head节点
        pre -> next = head;
        ListNode *mid = pre;
        // 快慢指针
        // 时间复杂度O(N)，空间复杂度O(1)
        while(n > 1) {
            fast = fast->next;
            --n;
        }
        while(fast->next) {
            mid = slow;
            slow = slow->next;
            fast = fast->next;
        }
        // slow为倒数第n个节点
        // 删除倒数第n个节点
        mid->next = slow->next;
        return pre->next;
    }
};
