// 给定一个二叉树，检查它是否是镜像对称的。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return false;
        // 递归
        // 时间复杂度O(N/2),空间复杂度O(height),二叉树的深度
        // return isSymc(root->left,root->right);

        // 迭代
        // 时间复杂度o(N),空间复杂度O(N)
        queue <TreeNode*> q;
        TreeNode* u = root->left, *v = root->right;
        q.push(u); q.push(v);
        while (!q.empty()) {
            u = q.front(); q.pop();
            v = q.front(); q.pop();
            if (!u && !v) continue;
            if ((!u || !v) || (u->val != v->val)) return false;

            q.push(u->left); 
            q.push(v->right);

            q.push(u->right); 
            q.push(v->left);
        }
        return true;

        // 迭代 无法考虑存在null的情况
        // vector<int> res;
        // stack<TreeNode*> stk;
        // while(!stk.empty() || root) {
        //     while(root){
        //         stk.push(root);
        //         root = root->left;
        //     }
        //     root = stk.top(); stk.pop();
        //     res.push_back(root->val);
        //     root = root->right;
        // }
        // if(res.size()%2 == 0) return false;
        // int i = 0, j = res.size()-1;
        // while(i < j) {
        //     if (res[i] == res[j]){
        //         ++i;--j;
        //     }
        //     else return false;
        // }
        // return true;
    }
    bool isSymc(TreeNode* l, TreeNode* r) {
        if (!l && !r) return true;
        // 可以简化到返回值，即判断l && r && l->val == r->val
        // 包括l和r不同时存在，l和r同时存在但对称节点值不相等
        // if ((!l && r) || (l && !r)) return false;
        // if (l && r && l->val != r->val) return false;
        return l && r && l->val == r->val && isSymc(l->left, r->right) && isSymc(l->right, r->left);       
    }
};
