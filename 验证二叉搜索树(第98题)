/* 给定一个二叉树，判断其是否是一个有效的二叉搜索树。
  假设一个二叉搜索树具有如下特征：

  节点的左子树只包含小于当前节点的数。
  节点的右子树只包含大于当前节点的数。
  所有左子树和右子树自身必须也是二叉搜索树。
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        // 中序遍历，得到的序列一定是升序序列
        // 时间复杂度O(n)，空间复杂度O(n)
        long long pre = LONG_MIN;
        stack<TreeNode*> stk;
        while(!stk.empty() || root) {
            while(root){
                stk.push(root);
                root = root->left;
            }
            root = stk.top(); stk.pop();
            if (root->val <= pre) return false;
            pre = root->val;
            root = root->right;
        }
        return true;
        // 递归
        // 时间复杂度 : O(n)，其中n为二叉树的节点个数。每个节点最多被访问一次。
        // 空间复杂度 : O(n)，递归函数为每一层递归函数分配栈空间，取决于递归的深度，即二叉树的高度。最坏情况下二叉树为一条链，递归最深达到n层，故最坏情况下空间复杂度为O(n)。

        // return isValid(root,LONG_MAX,LONG_MIN);
    }
    // long long类型为避免整数越界
    bool isValid(TreeNode* root, long long up, long long down) {
        if (!root) return true;
        // 如果节点不在范围[down,up]内则返回false
        if (root->val >= up || root->val <= down) return false;
        // 每向下一层，更新范围的边界值
        return isValid(root->left,root->val,down) && isValid(root->right,up, root->val);
    }
};
