// 给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。
// 你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        // 深度优先dfs
        // 时间复杂度O(min(m,n))，空间复杂度O(min(m,n))
        // if (!root1 && !root2) return nullptr;
        // if (root2 && !root1) return root2;
        // if (!root2 && root1) return root1;

        // auto target = new TreeNode(root1->val + root2->val);
        // target->left = mergeTrees(root1->left, root2->left);
        // target->right = mergeTrees(root1->right, root2->right);

        // return target;

        // 广度优先bfs
        // 时间复杂度O(),空间复杂度O()
        if (!root1 && !root2) return nullptr;
        if (root2 && !root1) return root2;
        if (!root2 && root1) return root1;
        queue<TreeNode*> q1, q2;
        q1.push(root1);q2.push(root2);
        while (!q1.empty() && !q2.empty()) {
            TreeNode* t1 = q1.front(); q1.pop();
            TreeNode* t2 = q2.front(); q2.pop();
            if (t1 && t2) t1->val += t2->val;
            else continue;
            if (t1->left && t2->left) {
                q1.push(t1->left);
                q2.push(t2->left);
            }
            else if (t1->left && !t2->left) {
                q1.push(t1->left);
                q2.push(new TreeNode());
            }
            else if (!t1->left && t2->left) t1->left = t2->left;
            if (t1->right && t2->right) {
                q1.push(t1->right);
                q2.push(t2->right);
            }
            else if (t1->right && !t2->right) {
                q1.push(t1->right);
                q2.push(new TreeNode());
            }
            else if (!t1->right && t2->right) t1->right = t2->right;
        }
        return root1;
    }
};
