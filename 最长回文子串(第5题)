// 给你一个字符串 s，找到 s 中最长的回文子串。

/*
回文字符串：对称位置相等
*/

class Solution {
public:
    // 暴力解法
    // bool isPal(string& str) {
    //     int len = str.size();
    //     for (int i = 0; i < len; ++i) {
    //         if (str[i] != str[len-1-i]) {
    //             return false;
    //         }
    //     }
    //     return true;
    // }
    string longestPalindrome(string s) {
        // 动态规划
        // 时间复杂度O(N^2),空间复杂度O(N^2)，动态规划数组的大小
        int n = s.size();
        if (n < 2) return s;
        // dp[left][right]标记从i到j是否是字串
        vector<vector<int>> dp(n, vector<int>(n));
        string ans;
        // length表示判断的字串的长度
        // left表示字串的左边起始位置
        // right表示字串的右边起始位置
        for(int length = 0; length < n; length++){
            for(int left = 0; left + length < n; left++){
                int right = left + length;
                // 即字符串长度为1时，矩阵对角线
                if(length == 0) dp[left][right] = 1; 
                // 字符串长度为2的时候，只需判断两者是否相等
                else if(length == 1) dp[left][right] = (s[left] == s[right]); 
                else{  // 字符串长度大于等于3之后
                       // 其是否是回文串取决于当前left和right及更小一号的字符串
                       // 更新参考值为矩阵的左下方
                    dp[left][right] = (s[left] == s[right] && dp[left + 1][right - 1]);
                }
                // 如果当前left位置到right位置的字串能够构成回文串，并且现在长度+1后大于之前记忆中的子回文串的长度，那么更新回文串！这里也可以优化成记录起始位置和长度的两个int，返回时再截取
                if(dp[left][right] && (length + 1) > ans.size()){
                    ans = s.substr(left, length + 1);
                }
            }
        }
        return ans;

        // // 暴力解法
        // // 时间复杂度O(N^3),空间复杂度O(1)
        // string res;
        // res += s[0];
        // for (int i = 0; i < m; ++i) {
        //     string mid;
        //     mid += s[i];
        //     for (int j = i+1; j < m; ++j) {
        //         mid += s[j];
        //         if (s[j] == s[i] && isPal(mid)) {
        //             if (mid.size() > res.size()) res = mid;
        //         }
        //     }
        // }
        // return res;
    }
};
