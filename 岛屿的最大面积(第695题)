/* 给定一个包含了一些 0 和 1 的非空二维数组 grid 。
一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)
*/

class Solution {
    int m=0,n=0;
public:
    // dfs深度优先，递归
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int res = 0 ; 
        m = grid.size();
        n = grid[0].size();
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                // 如果当前是土地 则计算和它联通的土地数量（也就是岛屿面积）
                if(grid[i][j]==1)
                    res = max(dfs(grid,i,j),res);
        return res;
    }
    int dfs(vector<vector<int>>& grid, int i, int j ){
        // 检查越界 或者 当前不是土地，则返回0个土地
        if(i<0 || i>=m || j<0 || j>=n || grid[i][j]==0) return 0;
        // 将土地变成水，因为后面已经将该土地计算在岛屿的面积上了。
        grid[i][j]=0;
        // 1表示当前位置是土地，再加上它上下左右四个方向的土地数量
        return 1+dfs(grid,i+1,j) + dfs(grid,i-1,j) + dfs(grid,i,j-1) + dfs(grid,i,j+1);
    }

// 广度优先，傻
// public:
//     int maxAreaOfIsland(vector<vector<int>>& grid) {
//         int m = grid.size(), n = grid[0].size();
//         queue<vector<int>> q;
//         int x, y, res = 0, count;
//         for (int i = 0; i < m; ++i) {
//             for (int j = 0; j < n; ++j) {
//                 if (grid[i][j] == 1) {
//                     q.push({i, j});
//                     count = 0;
//                     while(!q.empty()) {
//                         x = q.front()[0];
//                         y = q.front()[1];
//                         q.pop();
//                         if (grid[x][y] == 1) {
//                             ++count;
//                             // 将已经遍历过的岛屿标记为-1，防止重复记录
//                             grid[x][y] = -1;
//                             if (x-1 >= 0) q.push({x-1, y});
//                             if (x+1 < m) q.push({x+1, y});
//                             if (y-1 >= 0) q.push({x, y-1});
//                             if (y+1 < n) q.push({x, y+1});
//                         }
//                     }
//                     res = max(res, count);
//                 }
//             }
//         }
//         // for (int i = 0; i < v.size(); ++i) {
//         //     q.push(v[i]);
//         //     count = 0;
//         //     while(!q.empty()) {
//         //         x = q.front()[0];
//         //         y = q.front()[1];
//         //         q.pop();
//         //         if (grid[x][y] == 1) {
//         //             ++count;
//         //             if (x-1 >= 0) q.push({x-1, y});
//         //             if (x+1 < m) q.push({x+1, y});
//         //             if (y-1 >= 0) q.push({x, y-1});
//         //             if (y+1 < n) q.push({x, y+1});
//         //         }
//         //     }
//         //     res = max(res, count);
//         // }
//         return res;
//     }
};
