// 给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
    /*
    二叉搜索树是一棵二叉树，每个节点都有以下特性：
        1、大于左子树上任意一个节点的值，
        2、小于右子树上任意一个节点的值。
    */
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        // 递归
        // 时间复杂度：O(H)，其中H是树高。平均时间复杂度为O(logN)，最坏时间复杂度为O(N)
        // 空间复杂度：O(H)，平均时间复杂度为O(logN)，最坏时间复杂度为O(N)
        // if (!root || root->val == val) return root;
        // return root->val > val ? searchBST(root->left,val) : searchBST(root->right,val);

        // 迭代
        if (!root) return root;
        while(root && root->val != val) {
            root = root->val > val ? root->left : root->right;
        }
        return root;

        // BFS
        // queue<TreeNode*> q;
        // q.push(root);
        // TreeNode* t = new TreeNode();
        // while (!q.empty()) {
        //     t = q.front(); q.pop();
        //     if (t->val == val) return t;
        //     if (t->left) q.push(t->left);
        //     if (t->right) q.push(t->right);
        // }
        // return nullptr;
    }
};
