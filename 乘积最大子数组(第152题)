// 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int m = nums.size(), res = INT_MIN;
        // 动态规划
        // 遍历数组时计算当前最大值，不断更新令imax为当前最大值，则当前最大值为 imax = max(imax * nums[i], nums[i])
        // 由于存在负数，那么会导致最大的变最小的，最小的变最大的。因此还需要维护当前最小值imin，imin = min(imin * nums[i], nums[i])
        // 当负数出现时则imax与imin进行交换再进行下一步计算

        // 由于数的正负特性，维护一个最大乘积和一个最小乘积
        int imax = 1, imin = 1;
        // 时间复杂度O(N),空间负责度O(1)
        if (m == 1) return nums[0];
        for (int i = 0; i < m; ++i) {
            if (nums[i] < 0) {
                // 如果当前位为负数，则最大值与最小值更换
                int tmp = imax;
                imax = imin;
                imin = tmp;
            }
            // 如果当前位为非负数，比较当前位与乘积后的值
            imax = max(imax*nums[i], nums[i]);
            // 如果当前位为负数，记录最小值
            imin = min(imin*nums[i], nums[i]);
            // 保存每一步最大值
            res = max(imax, res);
        }
        
        return res;
    }
};
