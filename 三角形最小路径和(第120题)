// 给定一个三角形 triangle ，找出自顶向下的最小路径和。
// 每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。
// 也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        // 动态规划
        // 时间复杂度O(N2),空间复杂度O(N2)
        // 转移方程，dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]
        int n = triangle.size();
        vector<vector<int>> f(n, vector<int>(n));
        f[0][0] = triangle[0][0];
        for (int i = 1; i < n; ++i) {
            // 边界特殊情况，特殊处理，只有一条路径
            f[i][0] = f[i-1][0] + triangle[i][0];
            f[i][i] = f[i-1][i-1] + triangle[i][i];
            for (int j = 1; j < i; ++j) {
                f[i][j] = min(f[i - 1][j - 1], f[i - 1][j]) + triangle[i][j];
            }
        }
        // 从底层挑选出最小的值作为输出答案
        return *min_element(f[n - 1].begin(), f[n - 1].end());

        // 空间优化 + 动态规划
        // 时间复杂度O(N2),空间复杂度O(N)
        // 获取数组的行数
        // int m = triangle.size();
        // 创建结果变量res,并取整数最大值
        int res = INT_MAX;
        // 初始化储存数组，即在底层下面再添加一层
        vector<int> sum(m+1);
        // 自下而上的遍历，类似于金字塔
        for (int i = m-1; i >= 0; --i) {
            // 每往上一层相加的次数减少1
            for (int j = 0; j <= i; ++j) {
                sum[j] = min(sum[j], sum[j+1]) + triangle[i][j];
            }
        }
        // 最后结果汇聚在sum[0]
        return sum[0];
    }
};
