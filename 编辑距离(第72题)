// 给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。
/*你可以对一个单词进行如下三种操作：
  插入一个字符
  删除一个字符
  替换一个字符
*/


class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1));

        for (int i = 0; i <= n; ++i) dp[0][i] = i;
        for (int i = 0; i <= m; ++i) dp[i][0] = i;

        // 动态规划
        // 时间复杂度O(mn),空间复杂度O(mn)
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                // 状态转移方程
                // 如果比对字符相等，则dp[i][j] = dp[i-1][j-1]
                // 如果比对字符不相等，则dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + 1, 
                // 由于可替换机制，对应dp[i-1][j-1]->dp[i][j]可以通过一次替换操作完成,则考虑三者最小值加一

                // ⭐字符索引对应于字符串长度i-1
                if (word1[i-1] == word2[j-1]) {
                    dp[i][j] = dp[i-1][j-1];
                }
                else {
                    dp[i][j] = min(dp[i][j-1], min(dp[i-1][j], dp[i-1][j-1])) + 1;
                }
            }
        }
        return dp.back().back();
    }
};
