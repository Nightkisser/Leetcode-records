// 给定两个单词 word1 和 word2，找到使得 word1 和 word2 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        // 动态规划
        // 时间复杂度O(N^2),空间复杂度O(N^2)，动态规划数组的空间
        // 额外记录字符为空的情况，即数组大小为(m+1)*(n+1)
        vector<vector<int>> dp(m+1, vector<int>(n+1));

        // 初始化单个字符为空的情况
        for (int i = 0; i <= m; ++i) {
            dp[i][0] = i;
        }
        for (int i = 0; i <= n; ++i) {
            dp[0][i] = i;
        }
        // 遍历字符的数量
        // dp[i][j]表示word1[0:i]与word2[0:j]取相同需要的最小步数（区间左闭右开）
        // 状态转移方程：word1[i-1] == word2[j-1], dp[i][j] = dp[i-1][j-1]
        //               word1[i-1] != word2[j-1], dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (word1[i-1] == word2[j-1] ) {
                    dp[i][j] = dp[i-1][j-1];
                }
                else {
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1;
                }
            }
        }
        return dp[m][n];
    }
};
