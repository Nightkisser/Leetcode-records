// 给定两个由一些 闭区间 组成的列表，firstList 和 secondList ，其中 firstList[i] = [starti, endi] 而 secondList[j] = [startj, endj] 。
// 每个区间列表都是成对不相交的，并且已经排序 。返回这两个区间列表的交集 。
// 形式上，闭区间 [a, b]（其中 a <= b）表示实数 x 的集合，而 a <= x <= b 。
// 两个闭区间的 交集 是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3] 。

class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {
        int m = firstList.size(), n = secondList.size();
        if (m == 0 && n == 0) return {};
        vector<vector<int>> res;

        // 根据各种情况，流程化保存交集
        // 时间复杂度O(M+N),空间复杂度O(m+n+4)
        // int fl,fr,sl,sr;
        // for (int i = 0, j = 0; i < m && j < n;) {
        //     fl = firstList[i][0]; fr = firstList[i][1];
        //     sl = secondList[j][0]; sr = secondList[j][1];
        //     // 两区间部分相交且第二个区间右端点较大，则第一个区间向后遍历
        //     if (fr >= sl && fr < sr && fl < sl) {
        //         res.push_back({sl,fr});
        //         i++;
        //     }
        //     // 第二个区间内嵌于第一个区间且第一个区右端点较大，则第二个区间向后遍历
        //     else if (fr >= sr && fl <= sl) {
        //         res.push_back({sl,sr});
        //         j++;
        //     }
        //     // 两区间部分相交且第一个区间右端点较大，则第二个区间向后遍历
        //     else if (fl <= sr && fr > sr && fl > sl) {
        //         res.push_back({fl,sr});
        //         j++;
        //     }
        //     // 第一个区间内嵌于第二个区间且第二个区右端点较大，则第一个区间向后遍历
        //     else if (fr <= sr && fl >= sl) {
        //         res.push_back({fl,fr});
        //         i++;
        //     }
        //     // 两区间相离，更新右端点小的区间
        //     else if (fr < sl) i++;
        //     else if (sr < fl) j++;
        // }

        // 简化判断条件
        for (int i = 0, j = 0; i < m && j < n;) {
            int lnum = max(firstList[i][0],secondList[j][0]);
            int rnum = min(firstList[i][1],secondList[j][1]);
            if (lnum <= rnum) res.push_back({lnum,rnum});
            if (firstList[i][1] < secondList[j][1]) ++i;
            else ++j;
        }
        return res;
    }
};
