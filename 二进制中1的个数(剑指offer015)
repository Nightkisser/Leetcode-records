/*
请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。
例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
*/
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res = 0;
        // 主要思想：循环比较n&(n-1)
        // 时间复杂度O(M),M为n的二进制中1的个数,空间复杂度O(1)
        // 例如n=10100,则n-1=10011,记录+1
        // n&=n-1 -> 10000
        // n-1 = 01111,记录+1
        // n&=n-1 -> 0
        // while (n){
        //     res += 1;
        //     n &= n - 1;
        // }
        // return res;

        // 主要思想：循环比较n&1
        // 时间复杂度O(log2n),其中 log2n代表数字n最高位1的所在位数,空间复杂度O(1)
        // 例如n=10100,n&1=0;
        // n=n>>1,按位向右移一位,n=1010,n=101
        // n&1=1,记录+1
        while(n){
            res+=n&1;
            n >>= 1;
        }
        return res;
    }
};
