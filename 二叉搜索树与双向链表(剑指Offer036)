// 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。

class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if(root == nullptr) return nullptr;
        dfs(root);
        head->left = pre;
        pre->right = head;
        return head;
    }
private:
    Node *pre, *head;
    void dfs(Node* cur) {
        if(cur == nullptr) return;
        dfs(cur->left);
        if(pre != nullptr) pre->right = cur;
        else head = cur;
        cur->left = pre;
        pre = cur;
        dfs(cur->right);
    }
    
// 中序遍历，二次循环
Node* treeToDoublyList(Node* root) {
        if (!root) return nullptr;
        vector<Node*> res;
        inorder(root,res);
        Node* cur= res[0];
        // Node* n= new Node(cur->val);
        int m = res.size();
        for (int i= 1;i< res.size();++i) {
            cur->right = res[i];
            cur= cur->right;
        }
        cur->right = res[0];
        cur= res[0];
        for (int i= 1;i< res.size();++i) {
            cur->left = res[m-i];
            cur= cur->left;
        }
        cur->left = res[0];
        return res[0];
    }
    void inorder(Node* root, vector<Node*>& res) {
        if (!root) return ;
        inorder(root->left,res);
        res.push_back(root);
        inorder(root->right,res);
    }
};
