// 给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。

class Solution {
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        // int m = nums.size();
        // if (m==0) return {};
        // vector<int> res;
        // int sum=INT_MIN;
        // 二次遍历
        // 时间复杂度(n2)，空间复杂度O(1)
        // for (int i=0; i<= m-k; ++i) {
        //     for (int j= i; j< i+k; ++j) sum = max(sum,nums[j]);
        //     res.push_back(sum);
        //     sum=INT_MIN;
        // }
    
        //单调队列
        //时间复杂度O(N),空间复杂度O(N)
        //队列按从大到小放入
        //如果首位值（即最大值）不在窗口区间，删除首位
        //如果新增的值小于队列尾部值，加到队列尾部
        //如果新增值大于队列尾部值，删除队列中比新增值小的值，如果在把新增值加入到队列中
        //如果新增值大于队列中所有值，删除所有，然后把新增值放到队列首位，保证队列一直是从大到小
        if (nums.size() == 0) return nums;
        deque<int> dq;
        vector<int> res;
        int m = nums.size(); // 获取数组长度
        //未形成窗口区间
        for (int i = 0; i < k; i++) {
            //队列不为空时，当前值与队列尾部值比较，如果大于，删除队列尾部值
            //一直循环删除到队列中的值都大于当前值，或者删到队列为空
            while (!dq.empty() && nums[i] > dq.back())  dq.pop_back();
            //执行完上面的循环后，队列中要么为空，要么值都比当前值大，然后就把当前值添加到队列中
            dq.push_back(nums[i]);
        }
        //窗口区间刚形成后，把队列首位值添加到数组中
        //因为窗口形成后，就需要把队列首位添加到数组中，而下面的循环是直接跳过这一步的，所以需要我们直接添加
        res.push_back(dq.front());
        //窗口区间形成
        for (int i = k; i < m; ++i) {
            //i-k是已经在区间外了，如果首位等于nums[i-k]，那么说明此时首位值已经不再区间内了，需要删除
            if (dq.front() == nums[i - k])   dq.pop_front();
            //删除队列中比当前值大的值
            while (!dq.empty() && nums[i] > dq.back())  dq.pop_back();
            //把当前值添加到队列中
            dq.push_back(nums[i]);
            //把队列的首位值添加到res数组中
            res.push_back(dq.front());
        }
        return res;
    }
};
