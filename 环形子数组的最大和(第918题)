// 给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。
// 在此处，环形数组意味着数组的末端将会与开头相连呈环状。（形式上，当0 <= i < A.length 时 C[i] = A[i]，且当 i >= 0 时 C[i+A.length] = C[i]）
// 此外，子数组最多只能包含固定缓冲区 A 中的每个元素一次。（形式上，对于子数组 C[i], C[i+1], ..., C[j]，不存在 i <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length）

class Solution {
public:
/*根据题解可知：
 *环形子数组的最大和具有两种可能，一种是不使用环的情况，另一种是使用环的情况
 *不使用环的情况时，直接通过53题的思路，逐步求出整个数组中的最大子序和即可
 *使用到了环，则必定包含元素A[n-1]且说明从A[1]到A[n-2]这个子数组中必定包含负数
 *【否则只通过一趟最大子序和就可以的出结果】
 *因此只需要把A[0]-A[n-2]间这些负数的最小和求出来
 *用整个数组的和sum减掉这个负数最小和即可实现原环型数组的最大和
*/
    int maxSubarraySumCircular(vector<int>& nums) {
        int m = nums.size();
        if (m == 1) return nums[0];
        // 时间复杂度O(N)，空间复杂度O(1)
        int orimax = INT_MIN, orimin = INT_MAX, sum = 0, s = 0;
        // 求正常序列的最大子数组和
        for (int i = 0; i < m; ++i) {
            sum += nums[i];
            s = nums[i] + max(s, 0);
            orimax = max(s, orimax);
        }

        s = 0;
        // 因为需要利用环状结构的时候，必定包含最后数最后一元素
        // 根据环状特性，求出和最小的子数组和，然后不包含该子数组的和即为最大，即sum-min
        for (int i = 0; i < m-1; ++i) {
            s = nums[i] + min(s, 0);
            orimin = min(s, orimin);
        }
        // 返回正序子数组和与利用环状的子数组和最大值
        return max(sum - orimin, orimax);
    }
};
