/*
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
*/
class Solution {
public:
    int cuttingRope(int n) {
        // k[0]+k[1]+...k[m-1]=n
        // 求max(k[0]k[1]...k[m-1])
        // 已知数学关系(k[0]+..+k[m-1])/m >= (k[0]..k[m-1])^(1/m)
        // 已知k[0],k[1],...,k[m-1]值越靠近，乘积越接近最大值
        // 令n = ax将x分成a份,则y=x^a=x^(n/x),n为定值
        // 求y = x^(1/x)的最大值,lny = (1/x)lnx
        // 求导y'/y = -1/x^2*lnx+1/x^2,y'=0时,x=e,取得最大值
        // y(2) = 2^1/2=1.414;y(3) = 3^1/3=1.442;
        // 因此尽可能切割为长度为3的绳子,乘积会越大
        if (n<=3) return n-1;
        int num = n/3;
        int left = n%3;
        // 分为三种情况：
        // 余数为0
        if (left==0) return pow(3,num);
        // 余数为1,余数为2
        else return left==1 ? pow(3,num-1)*(3+left) : pow(3,num)*left;
    }
};
