// 给你一个 m x n 的矩阵 board ，由若干字符 'X' 和 'O' ，找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

class Solution {
private:
        int m, n;
public:
    // 深度遍历优先
    void dfs(vector<vector<char>>& board, int x, int y) {
        // 递归结束条件
        // 遍历元素到达边界，或者元素值不为"O"
        if (x < 0 || x >= m || y < 0 || y >= n || board[x][y] != 'O') {
            return;
        }
        // 标记与边界相连的'O'元素
        board[x][y] = '#';
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }

    void solve(vector<vector<char>>& board) {
        m = board.size();
        n = board[0].size();
        // 遍历纵向边界的元素
        for (int i = 0; i < m; i++) {
            // 调用递归函数
            dfs(board, i, 0);
            dfs(board, i, n - 1);
        }
        // 遍历横向边界的元素
        // 限制调节，避免重复遍历
        for (int i = 1; i < n - 1; i++) {
            dfs(board, 0, i);
            dfs(board, m - 1, i);
        }
        // 遍历整个矩阵
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // 将与边界'O'相连接的元素，还原为"O"
                if (board[i][j] == '#') {
                    board[i][j] = 'O';
                // 除了边界相关"O"，其被包围"O"
                // 将被'X'包围的"O"，改为"X"
                } else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
};
