// 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
// 说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int m = nums.size(),res=0;
        // 排序 + 遍历
        // 时间复杂度O(N),空间复杂度O(N)
        // int count=1;
        // sort(nums.begin(),nums.end());
        // res = nums[0];
        // for (int i = 1; i < m; ++i) {
        //     if (nums[i] == res) count++;
        //     else if (nums[i] != res && count == 1) break;
        //     else if (nums[i] != res && count != 1) {
        //         count = 1; res = nums[i];
        //     }
        // }

        // 位运算
        // 时间复杂度O(N),空间复杂度O(1)
        // 任何数和0做异或运算，结果仍然是原来的数，即a⊕0=a。
        // 任何数和其自身做异或运算，结果是0，即a⊕a=0。
        // 异或运算满足交换律和结合律，即a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b。
        for (int a : nums) res ^= a;
        return res;
    }
};
