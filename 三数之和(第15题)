// 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。
// 注意：答案中不可以包含重复的三元组。

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int m = nums.size();
        if (m==0) return {};
        // 时间复杂度O(N2)，空间复杂度O(N),排序空间使用logn
        vector<vector<int>> res;
        // 对数组进行排序,时间复杂度O(nlogn)
        sort(nums.begin(),nums.end());
        // 时间复杂度O(N)
        for (int i = 0; i < m; ++i){
            // 数组升序，如果当前元素大于0，则后面不存在满足条件的解
            if (nums[i]>0) break;
            // 剔除相同首元素的重复查找
            if (i > 0 && nums[i] == nums[i-1]) continue;
            int l = i+1, r = m-1;
            // 时间复杂度O(N)
            // 双指针进行搜索满足和为0的数
            while(l < r) {
                if (nums[l]+nums[r] + nums[i] < 0) ++l;
                else if (nums[l]+nums[r] + nums[i] > 0) --r;
                else {
                    res.push_back({nums[i],nums[l],nums[r]});

                    // 排除重复方案
                    while(l<r && nums[l] == nums[l+1]) ++l;
                    while(l<r && nums[r] == nums[r-1]) --r;
                    ++l; --r;
                }
            }
        }

        return res;

    }
};
